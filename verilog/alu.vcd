$date
	Sun Dec  2 20:33:28 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testALU $end
$var wire 1 ! overflow $end
$var wire 11 " out [10:0] $end
$var wire 1 # le_flag $end
$var wire 1 $ gr_flag $end
$var wire 1 % eq_flag $end
$var reg 11 & a [10:0] $end
$var reg 11 ' b [10:0] $end
$var reg 4 ( control [3:0] $end
$var reg 1 ) dutpassed $end
$scope module dut $end
$var wire 4 * funct [3:0] $end
$var wire 11 + in0 [10:0] $end
$var wire 11 , in1 [10:0] $end
$var wire 1 - not_of $end
$var wire 11 . sum [10:0] $end
$var wire 1 / sub_of $end
$var wire 11 0 product [10:0] $end
$var wire 1 1 prod_of $end
$var wire 11 2 not_out [10:0] $end
$var wire 1 # le_flag $end
$var wire 1 $ gr_flag $end
$var wire 1 % eq_flag $end
$var wire 11 3 difference [10:0] $end
$var wire 1 4 add_of $end
$var reg 11 5 out [10:0] $end
$var reg 1 ! overflow $end
$scope module add_module $end
$var wire 11 6 a [10:0] $end
$var wire 11 7 b [10:0] $end
$var wire 1 4 overflow $end
$var wire 10 8 small_sum [9:0] $end
$var wire 11 9 small_b [10:0] $end
$var wire 11 : small_a [10:0] $end
$var wire 11 ; out [10:0] $end
$var wire 1 < cout $end
$var wire 1 = cin $end
$upscope $end
$scope module mul_module $end
$var wire 11 > a [10:0] $end
$var wire 11 ? b [10:0] $end
$var wire 1 1 overflow $end
$var wire 11 @ overflow_bits [10:0] $end
$var wire 11 A out [10:0] $end
$upscope $end
$scope module sub_module $end
$var wire 11 B a [10:0] $end
$var wire 11 C b [10:0] $end
$var wire 1 / overflow $end
$var wire 10 D small_sub [9:0] $end
$var wire 11 E out [10:0] $end
$var wire 1 F cout1 $end
$var wire 1 G cout $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0G
0F
b11000100 E
b11000100 D
b100 C
b11001000 B
b1100100000 A
b0 @
b100 ?
b11001000 >
0=
0<
b11001100 ;
b11001000 :
b100 9
b11001100 8
b100 7
b11001000 6
bx 5
04
b11000100 3
b0 2
01
b1100100000 0
0/
b11001100 .
0-
b100 ,
b11001000 +
bx *
1)
bx (
b100 '
b11001000 &
0%
1$
0#
bx "
x!
$end
#20
0!
b11001100 "
b11001100 5
b0 (
b0 *
#30
b11000100 "
b11000100 5
b1 (
b1 *
#40
b1100100000 "
b1100100000 5
b10 (
b10 *
#50
b0 "
b0 5
b11 (
b11 *
#60
1=
b1111010100 8
b10000 D
1<
b1111100010 9
b11111010100 .
b11111010100 ;
b1111110010 :
b110100100 0
b110100100 A
b10000 3
b10000 E
b11111100010 '
b11111100010 ,
b11111100010 7
b11111100010 ?
b11111100010 C
0#
1$
b11111110010 &
b11111110010 +
b11111110010 6
b11111110010 >
b11111110010 B
#80
b11111010100 "
b11111010100 5
b0 (
b0 *
#90
b10000 "
b10000 5
b1 (
b1 *
#100
b110100100 "
b110100100 5
b10 (
b10 *
#110
b0 "
b0 5
b11 (
b11 *
#120
11
14
b11010 8
b1111001110 D
1F
0<
b1000100110 9
b10000011010 .
b10000011010 ;
b111110100 :
b1000111000 0
b1000111000 A
b10000110 @
b11111001110 3
b11111001110 E
1G
1#
0$
b1000100110 '
b1000100110 ,
b1000100110 7
b1000100110 ?
b1000100110 C
b111110100 &
b111110100 +
b111110100 6
b111110100 >
b111110100 B
#140
1!
b10000011010 "
b10000011010 5
b0 (
b0 *
#150
0!
b11111001110 "
b11111001110 5
b1 (
b1 *
#160
1!
b1000111000 "
b1000111000 5
b10 (
b10 *
#170
0!
b0 "
b0 5
b11 (
b11 *
#180
04
b11000 8
b110010000 D
0F
b101000100 9
b10000011000 .
b10000011000 ;
1<
b1011010100 :
b10001010000 0
b10001010000 A
b1100110 @
b110010000 3
b110010000 E
0G
0#
1$
b10101000100 '
b10101000100 ,
b10101000100 7
b10101000100 ?
b10101000100 C
b11011010100 &
b11011010100 +
b11011010100 6
b11011010100 >
b11011010100 B
#200
b10000011000 "
b10000011000 5
b0 (
b0 *
#210
b110010000 "
b110010000 5
b1 (
b1 *
#220
1!
b10001010000 "
b10001010000 5
b10 (
b10 *
#230
0!
b0 "
b0 5
b11 (
b11 *
#240
01
b10001 8
b10111 D
1F
b1111111101 9
b10001 .
b10001 ;
b10100 :
b11111000100 0
b11111000100 A
b11111111111 @
b10111 3
b10111 E
1G
b11111111101 '
b11111111101 ,
b11111111101 7
b11111111101 ?
b11111111101 C
b10100 &
b10100 +
b10100 6
b10100 >
b10100 B
#260
b10001 "
b10001 5
b0 (
b0 *
#270
b10111 "
b10111 5
b1 (
b1 *
#280
b11111000100 "
b11111000100 5
b10 (
b10 *
#290
b0 "
b0 5
b11 (
b11 *
#300
11
1/
0F
b10010110 8
b11010 D
b1000111110 9
b11101111100 @
b10010110 .
b10010110 ;
b1001011000 :
b101010000 0
b101010000 A
b10000011010 3
b10000011010 E
b11000111110 '
b11000111110 ,
b11000111110 7
b11000111110 ?
b11000111110 C
b1001011000 &
b1001011000 +
b1001011000 6
b1001011000 >
b1001011000 B
#320
b10010110 "
b10010110 5
b0 (
b0 *
#330
1!
b10000011010 "
b10000011010 5
b1 (
b1 *
#340
b101010000 "
b101010000 5
b10 (
b10 *
#350
0!
b0 "
b0 5
b11 (
b11 *
#360
1F
b1000100110 8
1/
b1100011110 D
b1110000100 9
b1000100110 .
b1000100110 ;
b1010100010 :
b110001000 0
b110001000 A
b11101100110 @
b1100011110 3
b1100011110 E
0G
1#
0$
b1110000100 '
b1110000100 ,
b1110000100 7
b1110000100 ?
b1110000100 C
b11010100010 &
b11010100010 +
b11010100010 6
b11010100010 >
b11010100010 B
#380
b1000100110 "
b1000100110 5
b0 (
b0 *
#390
1!
b1100011110 "
b1100011110 5
b1 (
b1 *
#400
b110001000 "
b110001000 5
b10 (
b10 *
#410
0!
b0 "
b0 5
b11 (
b11 *
#420
